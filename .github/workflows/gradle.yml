#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: develop

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'adopt'
    - name: Run 'build install javadoc spotlessCheck rat checkPom resolveDependencies pmdMain' with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: --console=plain --no-daemon build install javadoc spotlessCheck rat checkPom resolveDependencies pmdMain -x test

  # unitTest:
  #   needs: build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest]
  #       java: ['8', '11', '17']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up JDK for JAVA_BUILD_PATH
  #     uses: actions/setup-java@v3
  #     with:
  #       distribution: 'adopt'
  #       java-version: |
  #         8
  #         11
  #         17
  #   - name: Setup Gradle
  #     uses: gradle/gradle-build-action@v2
  #   - name: Set JAVA_TEST_PATH to 8
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_8_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '8'
  #   - name: Set JAVA_TEST_PATH to 11
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_11_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '11'
  #   - name: Set JAVA_TEST_PATH to 17
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_17_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '17'
  #   - name: Run unit tests
  #     run: |
  #       GRADLE_JVM_PATH=${JAVA_HOME_8_X64}
  #       JAVA_BUILD_PATH=${JAVA_HOME_8_X64}
  #       JAVA_BUILD_VERSION=8
  #       JAVA_TEST_VERSION=${{ matrix.java }}
  #       # echo "JAVA_TEST_VERSION=${JAVA_TEST_VERSION}"
  #       # echo "JAVA_TEST_PATH=${JAVA_TEST_PATH}"
  #       # echo "JAVA_BUILD_PATH=${JAVA_BUILD_PATH}"
  #       # echo "JAVA_BUILD_VERSION=${JAVA_BUILD_VERSION}"
  #       # echo "GRADLE_JVM_PATH=${GRADLE_JVM_PATH}"
  #       cp gradlew gradlewStrict
  #       sed -e 's/JAVA_HOME/GRADLE_JVM/g' -i.back gradlewStrict
  #       GRADLE_JVM=${GRADLE_JVM_PATH} JAVA_TEST_PATH=${JAVA_TEST_PATH} ./gradlewStrict \
  #         -PcompileJVM=${JAVA_BUILD_PATH} \
  #         -PcompileJVMVer=${JAVA_BUILD_VERSION} \
  #         -PtestJVM=${JAVA_TEST_PATH} \
  #         -PtestJVMVer=${JAVA_TEST_VERSION} \
  #         -PtestJava8Home=${JAVA_HOME_8_X64} \
  #         -PtestJava11Home=${JAVA_HOME_11_X64} \
  #         -PtestJava17Home=${JAVA_HOME_17_X64} \
  #         test --console=plain --no-daemon
  
  # acceptanceTest:
  #   needs: build
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       java: ['8', '11', '17']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up JDK for JAVA_BUILD_PATH
  #     uses: actions/setup-java@v3
  #     with:
  #       distribution: 'adopt'
  #       java-version: |
  #         8
  #         11
  #         17
  #   - name: Setup Gradle
  #     uses: gradle/gradle-build-action@v2
  #   - name: Set JAVA_TEST_PATH to 8
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_8_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '8'
  #   - name: Set JAVA_TEST_PATH to 11
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_11_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '11'
  #   - name: Set JAVA_TEST_PATH to 17
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_17_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '17'
  #   - name: Run acceptance tests
  #     run: |
  #       GRADLE_JVM_PATH=${JAVA_HOME_8_X64}
  #       JAVA_BUILD_PATH=${JAVA_HOME_8_X64}
  #       JAVA_BUILD_VERSION=8
  #       JAVA_TEST_VERSION=${{ matrix.java }}
  #       cp gradlew gradlewStrict
  #       sed -e 's/JAVA_HOME/GRADLE_JVM/g' -i.back gradlewStrict
  #       GRADLE_JVM=${GRADLE_JVM_PATH} JAVA_TEST_PATH=${JAVA_TEST_PATH} ./gradlewStrict \
  #         -PcompileJVM=${JAVA_BUILD_PATH} \
  #         -PcompileJVMVer=${JAVA_BUILD_VERSION} \
  #         -PtestJVM=${JAVA_TEST_PATH} \
  #         -PtestJVMVer=${JAVA_TEST_VERSION} \
  #         -PtestJava8Home=${JAVA_HOME_8_X64} \
  #         -PtestJava11Home=${JAVA_HOME_11_X64} \
  #         -PtestJava17Home=${JAVA_HOME_17_X64} \
  #         acceptanceTest --console=plain --no-daemon

  # integrationTest:
  #   needs: build
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       java: ['8', '11', '17']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up JDK for JAVA_BUILD_PATH
  #     uses: actions/setup-java@v3
  #     with:
  #       distribution: 'adopt'
  #       java-version: |
  #         8
  #         11
  #         17
  #   - name: Setup Gradle
  #     uses: gradle/gradle-build-action@v2
  #   - name: Set JAVA_TEST_PATH to 8
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_8_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '8'
  #   - name: Set JAVA_TEST_PATH to 11
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_11_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '11'
  #   - name: Set JAVA_TEST_PATH to 17
  #     run: |
  #       echo "JAVA_TEST_PATH=${JAVA_HOME_17_X64}" >> $GITHUB_ENV
  #     if: matrix.java == '17'
  #   - name: Run integration tests
  #     run: |
  #       GRADLE_JVM_PATH=${JAVA_HOME_8_X64}
  #       JAVA_BUILD_PATH=${JAVA_HOME_8_X64}
  #       JAVA_BUILD_VERSION=8
  #       JAVA_TEST_VERSION=${{ matrix.java }}
  #       cp gradlew gradlewStrict
  #       sed -e 's/JAVA_HOME/GRADLE_JVM/g' -i.back gradlewStrict
  #       GRADLE_JVM=${GRADLE_JVM_PATH} JAVA_TEST_PATH=${JAVA_TEST_PATH} ./gradlewStrict \
  #         -PcompileJVM=${JAVA_BUILD_PATH} \
  #         -PcompileJVMVer=${JAVA_BUILD_VERSION} \
  #         -PtestJVM=${JAVA_TEST_PATH} \
  #         -PtestJVMVer=${JAVA_TEST_VERSION} \
  #         -PtestJava8Home=${JAVA_HOME_8_X64} \
  #         -PtestJava11Home=${JAVA_HOME_11_X64} \
  #         -PtestJava17Home=${JAVA_HOME_17_X64} \
  #         integrationTest --console=plain --no-daemon

  # upgradeTest:
  #   needs: build
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up JDK 8
  #     uses: actions/setup-java@v3
  #     with:
  #       java-version: '8'
  #       distribution: 'adopt'
  #   - name: Run upgrade tests with Gradle
  #     uses: gradle/gradle-build-action@v2
  #     with:
  #       arguments: upgradeTest


  unitTest:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        distribution: ['liberica', 'temurin', 'adopt']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: ${{ matrix.distribution }}
        java-version: '8'
    - name: Run unit tests
      uses: gradle/gradle-build-action@v2
      with:
        arguments: geode-core:test --console=plain --no-daemon --tests org.apache.geode.internal.cache.OplogEntryIdSetTest